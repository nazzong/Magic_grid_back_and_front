{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(imgList),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(imgUpload),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(watchImgList),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchImgUpload),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(portfolioSaga);\n\nimport { all, call, delay, fork, put, takeLatest } from \"redux-saga/effects\";\nimport { IMG_LIST_REQUEST, IMG_LIST_SUCCESS, IMG_LIST_FAILURE, //\nIMG_UPLOAD_REQUEST, IMG_UPLOAD_SUCCESS, IMG_UPLOAD_FAILURE } from \"../reducers/portfolio\";\nimport axios from \"axios\"; // SAGA AREA ********************************************************************************************************\n// ******************************************************************************************************************\n\nfunction imgListAPI(data) {\n  return axios.get(\"/api/img/list\");\n}\n\nfunction imgList(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function imgList$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(imgListAPI, action.data);\n\n        case 3:\n          result = _context.sent;\n          _context.next = 6;\n          return put({\n            type: IMG_LIST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context.next = 13;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n          _context.next = 13;\n          return put({\n            type: IMG_LIST_FAILURE,\n            error: _context.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\nfunction imgUploadAPI(data) {\n  return axios.post(\"/api/img/image\", data);\n}\n\nfunction imgUpload(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function imgUpload$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(imgUploadAPI, action.data);\n\n        case 3:\n          result = _context2.sent;\n          _context2.next = 6;\n          return put({\n            type: IMG_UPLOAD_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context2.next = 13;\n          break;\n\n        case 8:\n          _context2.prev = 8;\n          _context2.t0 = _context2[\"catch\"](0);\n          console.error(_context2.t0);\n          _context2.next = 13;\n          return put({\n            type: IMG_UPLOAD_FAILURE,\n            error: _context2.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 8]]);\n} // ******************************************************************************************************************\n// ******************************************************************************************************************\n// ******************************************************************************************************************\n/////////\n\n\nfunction watchImgList() {\n  return _regeneratorRuntime.wrap(function watchImgList$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return takeLatest(IMG_LIST_REQUEST, imgList);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nfunction watchImgUpload() {\n  return _regeneratorRuntime.wrap(function watchImgUpload$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(IMG_UPLOAD_REQUEST, imgUpload);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nexport default function portfolioSaga() {\n  return _regeneratorRuntime.wrap(function portfolioSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([fork(watchImgList), fork(watchImgUpload) //,\n          ]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["/Users/njs/Documents/4leaf-education/magic_grid_app/front/sagas/portfolio.js"],"names":["imgList","imgUpload","watchImgList","watchImgUpload","portfolioSaga","all","call","delay","fork","put","takeLatest","IMG_LIST_REQUEST","IMG_LIST_SUCCESS","IMG_LIST_FAILURE","IMG_UPLOAD_REQUEST","IMG_UPLOAD_SUCCESS","IMG_UPLOAD_FAILURE","axios","imgListAPI","data","get","action","result","type","console","error","response","imgUploadAPI","post"],"mappings":";;oDAkBUA,O;qDAqBAC,S;qDAsBAC,Y;qDAGAC,c;qDAIeC,a;;AApEzB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,KAApB,EAA2BC,IAA3B,EAAiCC,GAAjC,EAAsCC,UAAtC,QAAwD,oBAAxD;AACA,SACEC,gBADF,EAEEC,gBAFF,EAGEC,gBAHF,EAIE;AACAC,kBALF,EAMEC,kBANF,EAOEC,kBAPF,QAQO,uBARP;AASA,OAAOC,KAAP,MAAkB,OAAlB,C,CAEA;AACA;;AACA,SAASC,UAAT,CAAoBC,IAApB,EAA0B;AACxB,SAAOF,KAAK,CAACG,GAAN,iBAAP;AACD;;AAED,SAAUpB,OAAV,CAAkBqB,MAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEmB,iBAAMf,IAAI,CAACY,UAAD,EAAaG,MAAM,CAACF,IAApB,CAAV;;AAFnB;AAEUG,UAAAA,MAFV;AAAA;AAII,iBAAMb,GAAG,CAAC;AACRc,YAAAA,IAAI,EAAEX,gBADE;AAERO,YAAAA,IAAI,EAAEG,MAAM,CAACH;AAFL,WAAD,CAAT;;AAJJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AASIK,UAAAA,OAAO,CAACC,KAAR;AATJ;AAUI,iBAAMhB,GAAG,CAAC;AACRc,YAAAA,IAAI,EAAEV,gBADE;AAERY,YAAAA,KAAK,EAAE,YAAIC,QAAJ,CAAaP;AAFZ,WAAD,CAAT;;AAVJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiBA,SAASQ,YAAT,CAAsBR,IAAtB,EAA4B;AAC1B,SAAOF,KAAK,CAACW,IAAN,mBAA6BT,IAA7B,CAAP;AACD;;AAED,SAAUlB,SAAV,CAAoBoB,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEmB,iBAAMf,IAAI,CAACqB,YAAD,EAAeN,MAAM,CAACF,IAAtB,CAAV;;AAFnB;AAEUG,UAAAA,MAFV;AAAA;AAII,iBAAMb,GAAG,CAAC;AACRc,YAAAA,IAAI,EAAER,kBADE;AAERI,YAAAA,IAAI,EAAEG,MAAM,CAACH;AAFL,WAAD,CAAT;;AAJJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AASIK,UAAAA,OAAO,CAACC,KAAR;AATJ;AAUI,iBAAMhB,GAAG,CAAC;AACRc,YAAAA,IAAI,EAAEP,kBADE;AAERS,YAAAA,KAAK,EAAE,aAAIC,QAAJ,CAAaP;AAFZ,WAAD,CAAT;;AAVJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAiBA;AACA;AACA;AAEA;;;AACA,SAAUjB,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMQ,UAAU,CAACC,gBAAD,EAAmBX,OAAnB,CAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGA,SAAUG,cAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMO,UAAU,CAACI,kBAAD,EAAqBb,SAArB,CAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUG,aAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMC,GAAG,CAAC,CACRG,IAAI,CAACN,YAAD,CADI,EAERM,IAAI,CAACL,cAAD,CAFI,CAIR;AAJQ,WAAD,CAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, call, delay, fork, put, takeLatest } from \"redux-saga/effects\";\nimport {\n  IMG_LIST_REQUEST,\n  IMG_LIST_SUCCESS,\n  IMG_LIST_FAILURE,\n  //\n  IMG_UPLOAD_REQUEST,\n  IMG_UPLOAD_SUCCESS,\n  IMG_UPLOAD_FAILURE,\n} from \"../reducers/portfolio\";\nimport axios from \"axios\";\n\n// SAGA AREA ********************************************************************************************************\n// ******************************************************************************************************************\nfunction imgListAPI(data) {\n  return axios.get(`/api/img/list`);\n}\n\nfunction* imgList(action) {\n  try {\n    const result = yield call(imgListAPI, action.data);\n\n    yield put({\n      type: IMG_LIST_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: IMG_LIST_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction imgUploadAPI(data) {\n  return axios.post(`/api/img/image`, data);\n}\n\nfunction* imgUpload(action) {\n  try {\n    const result = yield call(imgUploadAPI, action.data);\n\n    yield put({\n      type: IMG_UPLOAD_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: IMG_UPLOAD_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\n// ******************************************************************************************************************\n// ******************************************************************************************************************\n// ******************************************************************************************************************\n\n/////////\nfunction* watchImgList() {\n  yield takeLatest(IMG_LIST_REQUEST, imgList);\n}\nfunction* watchImgUpload() {\n  yield takeLatest(IMG_UPLOAD_REQUEST, imgUpload);\n}\n\nexport default function* portfolioSaga() {\n  yield all([\n    fork(watchImgList),\n    fork(watchImgUpload),\n\n    //,\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}