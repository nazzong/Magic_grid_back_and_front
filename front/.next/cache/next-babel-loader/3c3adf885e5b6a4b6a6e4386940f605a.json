{"ast":null,"code":"import { all, call, delay, fork, put, takeLatest } from \"redux-saga/effects\";\nimport { IMG_LIST_REQUEST, IMG_LIST_SUCCESS, IMG_LIST_FAILURE, //\nIMG_UPLOAD_REQUEST, IMG_UPLOAD_SUCCESS, IMG_UPLOAD_FAILURE, //\nIMG_CREATE_REQUEST, IMG_CREATE_SUCCESS, IMG_CREATE_FAILURE } from \"../reducers/portfolio\";\nimport axios from \"axios\"; // SAGA AREA ********************************************************************************************************\n// ******************************************************************************************************************\n\nfunction imgListAPI(data) {\n  return axios.get(`/api/img/list`);\n}\n\nfunction* imgList(action) {\n  try {\n    const result = yield call(imgListAPI, action.data);\n    yield put({\n      type: IMG_LIST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: IMG_LIST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction imgUploadAPI(data) {\n  return axios.post(`/api/img/image`, data);\n}\n\nfunction* imgUpload(action) {\n  try {\n    const result = yield call(imgUploadAPI, action.data);\n    yield put({\n      type: IMG_UPLOAD_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: IMG_UPLOAD_FAILURE,\n      error: err.response.data\n    });\n  }\n} // ******************************************************************************************************************\n// ******************************************************************************************************************\n// ******************************************************************************************************************\n/////////\n\n\nfunction* watchImgList() {\n  yield takeLatest(IMG_LIST_REQUEST, imgList);\n}\n\nfunction* watchImgUpload() {\n  yield takeLatest(IMG_UPLOAD_REQUEST, imgUpload);\n}\n\nexport default function* portfolioSaga() {\n  yield all([fork(watchImgList), fork(watchImgUpload) //,\n  ]);\n}","map":{"version":3,"sources":["/Users/njs/Documents/4leaf-education/magic_grid_app/front/sagas/portfolio.js"],"names":["all","call","delay","fork","put","takeLatest","IMG_LIST_REQUEST","IMG_LIST_SUCCESS","IMG_LIST_FAILURE","IMG_UPLOAD_REQUEST","IMG_UPLOAD_SUCCESS","IMG_UPLOAD_FAILURE","IMG_CREATE_REQUEST","IMG_CREATE_SUCCESS","IMG_CREATE_FAILURE","axios","imgListAPI","data","get","imgList","action","result","type","err","console","error","response","imgUploadAPI","post","imgUpload","watchImgList","watchImgUpload","portfolioSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,KAApB,EAA2BC,IAA3B,EAAiCC,GAAjC,EAAsCC,UAAtC,QAAwD,oBAAxD;AACA,SACEC,gBADF,EAEEC,gBAFF,EAGEC,gBAHF,EAIE;AACAC,kBALF,EAMEC,kBANF,EAOEC,kBAPF,EAQE;AACAC,kBATF,EAUEC,kBAVF,EAWEC,kBAXF,QAYO,uBAZP;AAaA,OAAOC,KAAP,MAAkB,OAAlB,C,CAEA;AACA;;AACA,SAASC,UAAT,CAAoBC,IAApB,EAA0B;AACxB,SAAOF,KAAK,CAACG,GAAN,CAAW,eAAX,CAAP;AACD;;AAED,UAAUC,OAAV,CAAkBC,MAAlB,EAA0B;AACxB,MAAI;AACF,UAAMC,MAAM,GAAG,MAAMpB,IAAI,CAACe,UAAD,EAAaI,MAAM,CAACH,IAApB,CAAzB;AAEA,UAAMb,GAAG,CAAC;AACRkB,MAAAA,IAAI,EAAEf,gBADE;AAERU,MAAAA,IAAI,EAAEI,MAAM,CAACJ;AAFL,KAAD,CAAT;AAID,GAPD,CAOE,OAAOM,GAAP,EAAY;AACZC,IAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACA,UAAMnB,GAAG,CAAC;AACRkB,MAAAA,IAAI,EAAEd,gBADE;AAERiB,MAAAA,KAAK,EAAEF,GAAG,CAACG,QAAJ,CAAaT;AAFZ,KAAD,CAAT;AAID;AACF;;AAED,SAASU,YAAT,CAAsBV,IAAtB,EAA4B;AAC1B,SAAOF,KAAK,CAACa,IAAN,CAAY,gBAAZ,EAA6BX,IAA7B,CAAP;AACD;;AAED,UAAUY,SAAV,CAAoBT,MAApB,EAA4B;AAC1B,MAAI;AACF,UAAMC,MAAM,GAAG,MAAMpB,IAAI,CAAC0B,YAAD,EAAeP,MAAM,CAACH,IAAtB,CAAzB;AAEA,UAAMb,GAAG,CAAC;AACRkB,MAAAA,IAAI,EAAEZ,kBADE;AAERO,MAAAA,IAAI,EAAEI,MAAM,CAACJ;AAFL,KAAD,CAAT;AAID,GAPD,CAOE,OAAOM,GAAP,EAAY;AACZC,IAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACA,UAAMnB,GAAG,CAAC;AACRkB,MAAAA,IAAI,EAAEX,kBADE;AAERc,MAAAA,KAAK,EAAEF,GAAG,CAACG,QAAJ,CAAaT;AAFZ,KAAD,CAAT;AAID;AACF,C,CAED;AACA;AACA;AAEA;;;AACA,UAAUa,YAAV,GAAyB;AACvB,QAAMzB,UAAU,CAACC,gBAAD,EAAmBa,OAAnB,CAAhB;AACD;;AACD,UAAUY,cAAV,GAA2B;AACzB,QAAM1B,UAAU,CAACI,kBAAD,EAAqBoB,SAArB,CAAhB;AACD;;AAED,eAAe,UAAUG,aAAV,GAA0B;AACvC,QAAMhC,GAAG,CAAC,CACRG,IAAI,CAAC2B,YAAD,CADI,EAER3B,IAAI,CAAC4B,cAAD,CAFI,CAIR;AAJQ,GAAD,CAAT;AAMD","sourcesContent":["import { all, call, delay, fork, put, takeLatest } from \"redux-saga/effects\";\nimport {\n  IMG_LIST_REQUEST,\n  IMG_LIST_SUCCESS,\n  IMG_LIST_FAILURE,\n  //\n  IMG_UPLOAD_REQUEST,\n  IMG_UPLOAD_SUCCESS,\n  IMG_UPLOAD_FAILURE,\n  //\n  IMG_CREATE_REQUEST,\n  IMG_CREATE_SUCCESS,\n  IMG_CREATE_FAILURE,\n} from \"../reducers/portfolio\";\nimport axios from \"axios\";\n\n// SAGA AREA ********************************************************************************************************\n// ******************************************************************************************************************\nfunction imgListAPI(data) {\n  return axios.get(`/api/img/list`);\n}\n\nfunction* imgList(action) {\n  try {\n    const result = yield call(imgListAPI, action.data);\n\n    yield put({\n      type: IMG_LIST_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: IMG_LIST_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction imgUploadAPI(data) {\n  return axios.post(`/api/img/image`, data);\n}\n\nfunction* imgUpload(action) {\n  try {\n    const result = yield call(imgUploadAPI, action.data);\n\n    yield put({\n      type: IMG_UPLOAD_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: IMG_UPLOAD_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\n// ******************************************************************************************************************\n// ******************************************************************************************************************\n// ******************************************************************************************************************\n\n/////////\nfunction* watchImgList() {\n  yield takeLatest(IMG_LIST_REQUEST, imgList);\n}\nfunction* watchImgUpload() {\n  yield takeLatest(IMG_UPLOAD_REQUEST, imgUpload);\n}\n\nexport default function* portfolioSaga() {\n  yield all([\n    fork(watchImgList),\n    fork(watchImgUpload),\n\n    //,\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}